{"version":3,"sources":["components/search/Searchbar.jsx","components/search/VideoDetails.jsx","components/search/SearchResults.jsx","App.jsx","serviceWorker.jsx","index.jsx"],"names":["Searchbar","props","handleChange","e","setState","target","name","value","handleSelect","toString","search","keyPress","keyCode","fetchResults","state","searchTerm","sort","sortOptions","key","text","Grid","Row","Column","width","verticalAlign","src","alt","className","textAlign","Input","placeholder","fluid","onKeyDown","this","onChange","action","icon","onClick","Form","Group","inline","Dropdown","options","defaultValue","selection","React","Component","VideoDetails","List","Item","Image","video","snippet","thumbnails","default","url","Content","Header","as","href","id","videoId","title","Description","description","stats","statistics","commentCount","SearchResults","videos","searchResponse","length","Fragment","Container","Divider","divided","relaxed","map","filter","stat","App","loadYoutubeApi","window","gapi","load","client","setApiKey","gapiReady","youtube","list","then","response","getVideoStats","result","items","err","vidIds","vid","join","console","error","Segment","Message","hidden","content","Dimmer","active","Loader","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.30a7f6db.chunk.js","sourcesContent":["import React from 'react';\nimport { Input, Grid, Form } from 'semantic-ui-react';\n\nclass Searchbar extends React.Component {\n   constructor(props) {\n      super(props);\n\n      const sortOptions = [\n         {\n           key: 'relevance',\n           text: 'Relevance',\n           value: 'relevance'\n         },\n         {\n           key: 'date',\n           text: 'Date',\n           value: 'date'\n         },\n         {\n           key: 'rating',\n           text: 'Rating',\n           value: 'rating'\n         }\n      ];\n\n      this.state = { searchTerm: '', sortOptions, sort: 'relevance' };\n   }\n\n   // handle state updates to fields\n   handleChange = e => this.setState({ [e.target.name]: e.target.value })\n   handleSelect = (e, { name, value }) => {\n      this.setState({ [name]: value.toString() }, () => this.search());\n   }\n\n   // if enter is pressed, run the search\n   keyPress = (e) => {\n      if(e.keyCode === 13){\n         this.search();\n     }\n   }\n\n   search = () => {\n      this.props.fetchResults(this.state.searchTerm, this.state.sort);\n   }\n\n   render() {\n\n      return (\n         <Grid>\n            <Grid.Row>\n               <Grid.Column width={2} verticalAlign={'middle'}>\n                  <img src={process.env.PUBLIC_URL + '/images/yt_logo_rgb_light.png'} alt=\"YouTube logo\" className=\"logo\" />\n               </Grid.Column>\n               <Grid.Column textAlign={\"center\"} width={10}>\n                  <Input\n                     name = \"searchTerm\"\n                     placeholder = \"Search...\"\n                     fluid\n                     onKeyDown = {this.keyPress}\n                     onChange = {this.handleChange}\n                     action = {{\n                        icon: 'search',\n                        onClick: () => this.search()\n                     }}\n                  />\n               </Grid.Column>\n               <Grid.Column width={4}>\n                  <Form>\n                     <Form.Group inline>\n                        <label>Sort</label>\n                        <Form.Dropdown\n                           options={this.state.sortOptions}\n                           defaultValue={this.state.sort}\n                           selection\n                           name=\"sort\"\n                           onChange={this.handleSelect}\n                        />\n                     </Form.Group>\n                  </Form>\n               </Grid.Column>\n            </Grid.Row>\n         </Grid>\n      );\n   }\n}\n\nexport default Searchbar;","import React from 'react';\nimport { List, Image, Grid } from 'semantic-ui-react';\n\nclass VideoDetails extends React.Component {\n   render() {\n      return (\n         <List.Item>\n            <Grid>\n               <Grid.Row>\n                  <Grid.Column width={2}>\n                     <Image src={this.props.video.snippet.thumbnails.default.url} />\n                  </Grid.Column>\n                  <Grid.Column width={14}>\n                     <List.Content>\n                        <List.Header\n                           as=\"a\"\n                           href={`https://www.youtube.com/watch?v=${this.props.video.id.videoId}`}\n                           target=\"_blank\">\n                           {this.props.video.snippet.title}\n                        </List.Header>\n                        <List.Description className=\"videoDescription\">\n                           {this.props.video.snippet.description}\n                           <br /><br />\n                           {this.props.stats[0].statistics.commentCount} Comments\n                        </List.Description>\n                     </List.Content>\n                  </Grid.Column>\n               </Grid.Row>\n            </Grid>\n            \n            \n         </List.Item>\n     );\n  }\n}\n\nexport default VideoDetails;","import React from 'react';\nimport { Header, Container, List, Divider } from 'semantic-ui-react';\n\nimport VideoDetails from './VideoDetails';\n\nclass SearchResults extends React.Component {\n   constructor(props) {\n      super(props);\n\n      this.state = { videos: props.videos, stats: props.stats };\n   }\n\n   static getDerivedStateFromProps(props, state) {\n      if (props.videos !== state.videos) {\n         return { videos: props.videos, stats: props.stats };\n      }\n      return null;\n   }\n\n   render() {\n      let searchResponse = '';\n      if (this.props.searchTerm.length > 0) {\n         searchResponse = (\n            <React.Fragment>\n               <Header as=\"h3\">You searched for: {this.props.searchTerm}</Header>\n               {this.state.videos.length} Results\n            </React.Fragment>\n         );\n      }\n\n     return (\n         <Container>\n            {searchResponse}\n            <Divider />\n            <List divided relaxed>\n               {this.state.videos.map(video =>\n                  <VideoDetails key={video.id.videoId} video={video} stats={ this.state.stats.filter(stat => stat.id === video.id.videoId )} />\n               )}\n            </List>\n         </Container>\n     );\n  }\n}\n\nexport default SearchResults;","import React from 'react';\nimport { Container, Segment, Message, Loader, Dimmer } from 'semantic-ui-react';\n\nimport Searchbar from './components/search/Searchbar';\nimport SearchResults from './components/search/SearchResults';\n\nimport './assets/css/App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { searchTerm: '', videos: [], err: '', gapiReady: false, sort: 'relevance' };\n  }\n\n  componentDidMount() {\n    this.loadYoutubeApi();\n  }\n\n  loadYoutubeApi = () => {\n    window.gapi.load('client', () => {\n      window.gapi.client.setApiKey('AIzaSyA087hQUUOEDdrswcMtIvTFlvG0z7pxJjE');\n\n      window.gapi.client.load('youtube', 'v3', () => {\n        this.setState({ gapiReady: true });\n      });\n    });\n  }\n\n  fetchResults = (searchTerm, sort) => {\n    if (this.state.gapiReady) {\n      return window.gapi.client.youtube.search.list({\n        'part': 'snippet',\n        'maxResults': 25,\n        'q': searchTerm,\n        'order': sort\n      })\n      .then((response) => {\n        this.getVideoStats(searchTerm, response.result.items, sort);\n      },\n      (err) => { this.setState({ videos: [], err: 'There was an error, please try again' }); }\n      );\n    }\n  }\n\n  // since the youtube \"search\" method doesn't return stats, we need to grab them from another endpoint\n  getVideoStats = (searchTerm, videos) => {\n    // create comma separated list of video id's to pass to api and retrieve stats\n    const vidIds = videos.map(function(vid){\n       return vid.id.videoId;\n    }).join(\",\");\n\n    return window.gapi.client.youtube.videos.list({\n       \"part\": \"statistics\",\n       \"id\": vidIds\n     })\n    .then((response) => {\n       this.setState({ searchTerm, videos, stats: response.result.items });\n    },\n    function(err) { console.error(\"Execute error\", err); });\n }\n\n  render() {\n    if(!this.state.gapiReady) {\n      return (\n        <Dimmer active>\n          <Loader>Loading API</Loader>\n        </Dimmer>\n      );\n    }\n    \n    return (\n      <Container className=\"mainContent\">\n        <Segment.Group>\n          <Segment>\n            <Searchbar fetchResults={this.fetchResults} />\n          </Segment>\n          <Segment>\n            <Message\n              error\n              hidden={this.state.err.length === 0}\n              content={this.state.err}\n            />\n            <SearchResults videos={this.state.videos} searchTerm={this.state.searchTerm} stats={this.state.stats} />\n          </Segment>\n        </Segment.Group>\n    </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}